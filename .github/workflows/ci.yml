name: CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        go-version: [1.21, 1.22]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Verify dependencies
      run: go mod verify
    
    - name: Run go vet
      run: go vet ./...
    
    - name: Run go fmt
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not formatted:"
          gofmt -s -l .
          echo "Please run 'gofmt -s -w .' to format your code."
          exit 1
        fi
    
    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
  
  build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.22
    
    - name: Build binary
      run: |
        # Try different build paths to handle various project structures
        if [ -d "./cmd/snippety" ]; then
          echo "Building from ./cmd/snippety"
          go build -v -o snippety ./cmd/snippety
        elif [ -f "./cmd/snippety/main.go" ]; then
          echo "Building from ./cmd/snippety/main.go"  
          go build -v -o snippety ./cmd/snippety/main.go
        elif [ -f "./main.go" ]; then
          echo "Building from ./main.go"
          go build -v -o snippety ./main.go
        else
          echo "Building from module root"
          go build -v -o snippety .
        fi
    
    - name: Test binary (if it exists)
      run: |
        if [ -f "./snippety" ]; then
          ./snippety --version || echo "Version command not implemented yet"
        else
          echo "Binary not found, but build succeeded"
        fi